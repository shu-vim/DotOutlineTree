!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_JP_AUTHOR	Hirohito Higashi	/h_east@pop11.odn.ne.jp/
!_TAG_PROGRAM_JP_URL	http://hp.vector.co.jp/authors/VA025040/	//
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7J1	//
DOT	.\dot.vim	/^command!        DOT                     :call <SID>DOT_execute(<line1>)$/;"	c
DOTCopy	.\dot.vim	/^command! -range DOTCopy                 :call <SID>DOT_copy(<line1>, <line2>)$/;"	c
DOTCreateChildNode	.\dot.vim	/^command!        DOTCreateChildNode      :call <SID>DOT_createChildNode(<line1>)$/;"	c
DOTCreateChildNodeL	.\dot.vim	/^command!        DOTCreateChildNodeL     :call <SID>DOT_createChildNodeL(<line1>)$/;"	c
DOTCreateSiblingNode	.\dot.vim	/^command!        DOTCreateSiblingNode    :call <SID>DOT_createSiblingNode(<line1>)$/;"	c
DOTCreateUncleNode	.\dot.vim	/^command!        DOTCreateUncleNode      :call <SID>DOT_createUncleNode(<line1>)$/;"	c
DOTDecLevel	.\dot.vim	/^command! -range DOTDecLevel             :call <SID>DOT_decLevel(<line1>, <line2>)$/;"	c
DOTDeleteNode	.\dot.vim	/^command! -range DOTDeleteNode           :call <SID>DOT_deleteNode(<line1>, <line2>)$/;"	c
DOTDump	.\dot.vim	/^command!        DOTDump                 :call <SID>DOT_dump()$/;"	c
DOTEscape	.\dot.vim	/^command!        DOTEscape               :call <SID>DOT_escape()$/;"	c
DOTFlipDownward	.\dot.vim	/^command! -range DOTFlipDownward         :call <SID>DOT_flipDownward(<line1>, <line2>)$/;"	c
DOTFlipUpward	.\dot.vim	/^command! -range DOTFlipUpward           :call <SID>DOT_flipUpward(<line1>, <line2>)$/;"	c
DOTIncLevel	.\dot.vim	/^command! -range DOTIncLevel             :call <SID>DOT_incLevel(<line1>, <line2>)$/;"	c
DOTJump	.\dot.vim	/^command!        DOTJump                 :call <SID>DOT_jump(<line1>)$/;"	c
DOTPaste	.\dot.vim	/^command!        DOTPaste                :call <SID>DOT_paste_p(<line1>)$/;"	c
DOTPasteP	.\dot.vim	/^command!        DOTPasteP              :call <SID>DOT_paste_P(<line1>)$/;"	c
DOTQuit	.\dot.vim	/^command!        DOTQuit                 :call <SID>DOT_quit()$/;"	c
DOTRedo	.\dot.vim	/^command!        DOTRedo                 :call <SID>DOT_redo()$/;"	c
DOTUndo	.\dot.vim	/^command!        DOTUndo                 :call <SID>DOT_undo()$/;"	c
DOTUpdate	.\dot.vim	/^command!        DOTUpdate               :call <SID>DOT_update()$/;"	c
DOT__buildNodeTree	.\dot.vim	/^function! s:DOT__buildNodeTree(buffNum)$/;"	f
DOT__createNode	.\dot.vim	/^function! s:DOT__createNode(dokozonoLineNum, levelDelta, titlePrompt)$/;"	f
DOT__dotDecorateHeading	.\dot.vim	/^function! s:DOT__dotDecorateHeading(title, level)$/;"	f
DOT__dotDetectHeading	.\dot.vim	/^function! s:DOT__dotDetectHeading(targetLine, targetLineNum, entireLines)$/;"	f
DOT__dotExtractLevel	.\dot.vim	/^function! s:DOT__dotExtractLevel(targetLine, targetLineNum, entireLines)$/;"	f
DOT__dotExtractTitle	.\dot.vim	/^function! s:DOT__dotExtractTitle(targetLine, targetLineNum, entireLines)$/;"	f
DOT__dotSetHeading	.\dot.vim	/^function! s:DOT__dotSetHeading(title, level, lineNum)$/;"	f
DOT__dumpTree	.\dot.vim	/^function! s:DOT__dumpTree(node)$/;"	f
DOT__inTreeBuffer	.\dot.vim	/^function! s:DOT__inTreeBuffer(buffNum)$/;"	f
DOT__nodeIsTerminator	.\dot.vim	/^function! s:DOT__nodeIsTerminator(node)$/;"	f
DOT__openTreeBuffWindow	.\dot.vim	/^function! s:DOT__openTreeBuffWindow(openMethod)$/;"	f
DOT__renderTree	.\dot.vim	/^function! s:DOT__renderTree(node)$/;"	f
DOT__renderTreeInner	.\dot.vim	/^function! s:DOT__renderTreeInner(node)$/;"	f
DOT_copy	.\dot.vim	/^function! s:DOT_copy(dokoLineNum1, dokoLineNum2)$/;"	f
DOT_createChildNode	.\dot.vim	/^function! s:DOT_createChildNode(dokozonoLineNum)$/;"	f
DOT_createChildNodeL	.\dot.vim	/^function! s:DOT_createChildNodeL(dokozonoLineNum)$/;"	f
DOT_createSiblingNode	.\dot.vim	/^function! s:DOT_createSiblingNode(dokozonoLineNum)$/;"	f
DOT_createUncleNode	.\dot.vim	/^function! s:DOT_createUncleNode(dokozonoLineNum)$/;"	f
DOT_decLevel	.\dot.vim	/^function! s:DOT_decLevel(dokoLineNum1, dokoLineNum2)$/;"	f
DOT_deleteNode	.\dot.vim	/^function! s:DOT_deleteNode(dokoLineNum1, dokoLineNum2)$/;"	f
DOT_dump	.\dot.vim	/^function! s:DOT_dump()$/;"	f
DOT_escape	.\dot.vim	/^function! s:DOT_escape()$/;"	f
DOT_execute	.\dot.vim	/^function! s:DOT_execute(dokozonoLineNum)$/;"	f
DOT_flipDownward	.\dot.vim	/^function! s:DOT_flipDownward(dokoLineNum1, dokoLineNum2)$/;"	f
DOT_flipUpward	.\dot.vim	/^function! s:DOT_flipUpward(dokoLineNum1, dokoLineNum2)$/;"	f
DOT_incLevel	.\dot.vim	/^function! s:DOT_incLevel(dokoLineNum1, dokoLineNum2)$/;"	f
DOT_jump	.\dot.vim	/^function! s:DOT_jump(dokozonoLineNum)$/;"	f
DOT_paste_P	.\dot.vim	/^function! s:DOT_paste_P(dokozonoLineNum)$/;"	f
DOT_paste_p	.\dot.vim	/^function! s:DOT_paste_p(dokozonoLineNum)$/;"	f
DOT_quit	.\dot.vim	/^function! s:DOT_quit()$/;"	f
DOT_redo	.\dot.vim	/^function! s:DOT_redo()$/;"	f
DOT_setDefaultKeyMap	.\dot.vim	/^function! g:DOT_setDefaultKeyMap()$/;"	f
DOT_setOldDefaultKeyMap	.\dot.vim	/^function! g:DOT_setOldDefaultKeyMap()$/;"	f
DOT_undo	.\dot.vim	/^function! s:DOT_undo()$/;"	f
DOT_update	.\dot.vim	/^function! s:DOT_update()$/;"	f
DotOutlineTree	.\dot.vim	/^command!        DotOutlineTree          :call <SID>DOT_execute(<line1>)$/;"	c
Node_add	.\dot.vim	/^function! s:Node_add(rootNode, title, level, lineNum)$/;"	f
Node_appendChild	.\dot.vim	/^function! s:Node_appendChild(parentNode, childNode)$/;"	f
Node_create	.\dot.vim	/^function! s:Node_create(title, level, lineNum)$/;"	f
Node_getLastDescendantNode	.\dot.vim	/^function! s:Node_getLastDescendantNode(node)$/;"	f
Node_getLastNode	.\dot.vim	/^function! s:Node_getLastNode(rootNode)$/;"	f
Node_getNextNode	.\dot.vim	/^function! s:Node_getNextNode(node)$/;"	f
Node_getNodeByLineNum	.\dot.vim	/^function! s:Node_getNodeByLineNum(rootNode, lineNum)$/;"	f
Node_getNodeIndex	.\dot.vim	/^function! s:Node_getNodeIndex(rootNode, node)$/;"	f
Node_getNodeIndexInner	.\dot.vim	/^function! s:Node_getNodeIndexInner(rootNode, node, currIndex)$/;"	f
Node_getNthNode	.\dot.vim	/^function! s:Node_getNthNode(node, n)$/;"	f
Node_getPrevNode	.\dot.vim	/^function! s:Node_getPrevNode(node)$/;"	f
Text_collectHeadings	.\dot.vim	/^function! s:Text_collectHeadings(buffNum, headingDetector, titleExtractor, levelExtractor)$/;"	f
Text_copy	.\dot.vim	/^function! s:Text_copy(firstLineNum, lastLineNum)$/;"	f
Text_deleteLines	.\dot.vim	/^function! s:Text_deleteLines(firstLineNum, lastLineNum)$/;"	f
Text_getLines	.\dot.vim	/^function! s:Text_getLines(firstLineNum, lastLineNum)$/;"	f
Text_insertHeading	.\dot.vim	/^function! s:Text_insertHeading(lineNum, title, level, headingDecorator)$/;"	f
Text_insertLines	.\dot.vim	/^function! s:Text_insertLines(lineNum, contents)$/;"	f
Text_paste	.\dot.vim	/^function! s:Text_paste(lineNum)$/;"	f
Text_setHeading	.\dot.vim	/^function! s:Text_setHeading(title, level, lineNum, headingSetter)$/;"	f
Util_switchCurrentBuffer	.\dot.vim	/^function! s:Util_switchCurrentBuffer(buffNum, newcmd)$/;"	f
g:DOT_closeOnJump	.\dot.vim	/^    let g:DOT_closeOnJump = 0$/;"	v
g:DOT_keyMapFunction	.\dot.vim	/^    let g:DOT_keyMapFunction = function('g:DOT_setOldDefaultKeyMap')$/;"	v
g:DOT_newMethod	.\dot.vim	/^    let g:DOT_newMethod = 'vnew'$/;"	v
g:DOT_windowSize	.\dot.vim	/^    let g:DOT_windowSize = '30'$/;"	v
s:DOT_BUFFER_PREFIX	.\dot.vim	/^let s:DOT_BUFFER_PREFIX = 'DotOutlineTree'$/;"	v
s:DOT_REGEXP	.\dot.vim	/^let s:DOT_REGEXP = '^\\(\\.\\+\\)\\s*\\(.*\\)$'$/;"	v
s:Node_NULL	.\dot.vim	/^    let s:Node_NULL = {'title': ':NULL:', 'level':0, 'lineNum':0}$/;"	v
